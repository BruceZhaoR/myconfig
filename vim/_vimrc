source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

"处理文本中显示乱码 start
set fenc=utf-8
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936,latin-1
set fileformat=unix

if has("win32")
set fileencoding=utf-8
else
set fileencoding=utf-8
endif
"处理文本中显示乱码 end

source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"处理consle输出乱码
language messages zh_CN.utf-8
"中文乱码结束

" 另外一种解决中文乱码的方法
" set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
" set termencoding=utf-8
" set encoding=utf-8
" set fileencoding=utf-8

" 显示文件编码类型
if has("statusline")
 set statusline=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P
endif

set nocompatible             " 关闭 vi 兼容模式
filetype on                  "侦测文件类型
syntax on                    " 自动语法高亮
colorscheme molokai          " 设定配色方案
let g:rehash256 = 1

highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0

" html,css 高亮
:let g:colorizer_auto_color = 1
:let g:colorizer_auto_filetype='css,html'
:let g:colorizer_skip_comments = 1
let g:colorizer_custom_colors = { 'white': '#fff'}

set guifont=Consolas:h12     " 设置字体
set lines=30 columns=85      " 设置启动窗口大小30*85
set nobackup                 " 覆盖文件时不备份
set confirm                  " 设置未保存时候，弹出确认
set autochdir                " 自动切换当前目录为当前文件所在的目录
set history=50
set ruler                    " show the cursor position all the time
set showcmd                  " display incomplete commands
set incsearch                " do incremental searching
set ignorecase smartcase     " 搜索时忽略大小写
set hlsearch                 " 搜索时高亮显示被找到的文本
set smartindent              " 开启新行时使用智能自动缩进
set autoindent               " 自动缩进
set shiftwidth=2             " 设置每次缩进的列数
set tabstop=4               " 设置tab=4
set showmatch                " 自动匹配括号
set laststatus=2             " 总是显示状态栏
set noerrorbells             " 关闭错误信息响铃
set novisualbell             " 关闭使用可视响铃代替呼叫

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Numbers
set number
set guioptions-=T			" 隐藏工具栏
" set guioptons-=m " 隐藏菜单栏
" set go+=m "显示菜单栏

set cursorcolumn             "光标列
set cursorline               "光标行

highlight CursorLine cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

