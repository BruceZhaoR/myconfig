source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

"处理文本中显示乱码 start
set fenc=utf-8
set encoding=utf-8
"set rop=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936,latin-1
set fileformat=dos

if has("win32")
set fileencoding=utf-8
else
set fileencoding=utf-8
endif
"处理文本中显示乱码 end

source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"处理consle输出乱码
" language messages zh_CN.UTF-8
"中文乱码结束

set nocompatible              " be iMproved, required
filetype off                  " required

set rtp+=$HOME/vimfiles/bundle/Vundle.vim
call vundle#begin('$HOME/vimfiles/bundle/')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'gabrielelana/vim-markdown'

" status/tabline from github vim-ariline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end()            " required
filetype plugin indent on    " required

" statusline
"set statusline=%<%F%h%m%r\ [%{&ff}]\ (%{strftime(\"%H:%M\ %d/%m/%Y\",getftime(expand(\"%:p\")))})%=%l,%c%V\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %P

set laststatus=2 " Always display the statusline in all windows
set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

" Airline:
"
let g:airline_theme='simple'
set guifont=Noto\ Mono\ for\ Powerline:h12
let g:airline_powerline_fonts = 1
"打开tabline功能,方便查看Buffer和切换，这个功能比较不错"
"我还省去了minibufexpl插件，因为我习惯在1个Tab下用多个buffer"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

 "设置切换Buffer快捷键"
 nnoremap <C-N> :bn<CR>
 nnoremap <C-P> :bp<CR>

" 关闭状态显示空白符号计数,这个对我用处不大"
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
let g:airline#extensions#wordcount#enabled = 0
let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
let g:airline_skip_empty_sections = 1






set ai 											 " 自动缩进
syntax on                    " 自动语法高亮
color dracula                " 设定配色方案
set number                   " 显示行号
set nobomb
set guioptions-=T            " 隐藏工具栏
" set guioptons-=m           " 隐藏菜单栏
" set go+=m "显示菜单栏
set autochdir                " 自动切换为当前文件所在的目录
" set guifont=Consolas:h13     " 设置字体
set lines=30 columns=85      " 设置启动窗口大小30*85
set nobackup                 " 覆盖文件时不备份
set noundofile
set confirm                  " 设置未保存时候，弹出确认
set history=100
set ruler                    " show the cursor position
set showcmd                  " display incomplete commands
set incsearch                " do incremental searching
set ignorecase smartcase     " 搜索时忽略大小写
set hlsearch                 " 搜索时高亮显示被找到的文本
set smartindent              " 开启新行时使用智能自动缩进
set shiftwidth=2             " 设置每次缩进的列数
set tabstop=2               " 设置tab=2
set showmatch                " 自动匹配括号
set noerrorbells             " 关闭错误信息响铃
set novisualbell             " 关闭使用可视响铃代替呼叫

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

let do_syntax_sel_menu = 1|runtime! synmenu.vim|aunmenu &Syntax

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

